name: SonarQube
on:
  push:
    branches:
      - main
      - develop
      - feature/**
      - release/**
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Install dotnet-coverage
        run: dotnet tool install --global dotnet-coverage

      - name: Install dotnet-sonarscanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Install gitversion
        run: dotnet tool install --global GitVersion.Tool --version 5.12.0

      - name: Restore NuGet packages
        run: dotnet restore VictoryCenter/VictoryCenter.sln

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner

      - name: Set up Docker Compose
        run: docker compose -f docker-compose.yml up -d

      - name: Wait for SQL Server to be ready
        run: |
          echo "Waiting for SQL Server to start..."
          sleep 30

      - name: Begin SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: bash
        run: |
          dotnet sonarscanner begin \
            /k:"ita-social-projects_VictoryCenter-Back" \
            /o:"ita-social-projects" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml \
            /d:sonar.exclusions="**/Migrations/**"

      - name: Build the solution
        run: dotnet build VictoryCenter/VictoryCenter.sln --no-incremental

      - name: Run unit tests and generate coverage
        run:  dotnet-coverage collect "dotnet test VictoryCenter/VictoryCenter.UnitTests/VictoryCenter.UnitTests.csproj --configuration Release" -f xml -o "coverage1.xml"

      - name: Run integration tests and generate coverage
        env:
          INTEGRATION_TESTS_DB_CONNECTION_STRING: ${{ vars.INTEGRATION_TESTS_DB_CONNECTION_STRING }}
        run: dotnet-coverage collect "dotnet test VictoryCenter/VictoryCenter.IntegrationTests/VictoryCenter.IntegrationTests.csproj --configuration Release" -f xml -o "coverage2.xml"

      - name: Merge coverage reports
        run:  dotnet-coverage merge coverage1.xml coverage2.xml -f xml -o coverage.xml

      - name: End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner end \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
